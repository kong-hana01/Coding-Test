'''
문제
n x m 크기의 금광이 있다. 금광은 1 x 1 크기의 칸으로 나눠져 있으며, 각 칸은 특정한 크기의 금이 들어있다.

채굴자는 첫 번째 열부터 출발하여 금을 캐기 시작한다. 맨 처음에는 첫번째 열의 어느 행에서든 출발할 수 있다. 
이후, m - 1번에 걸쳐서 매번 오른쪽 위, 오른쪽, 오른쪽 아래 3가지 중 하나의 위치로 이동해야한다.
결과적으로 채굴자가 얻을 수 있는 금의 최대 크기를 출력하는 프로그램을 작성하시오.


입력
첫째 줄에 테스트 케이스 T가 입력된다. (1 <= T <= 100)

매 테스트 케이스 첫째 줄에 n과 m이 공백으로 구분되어 입력된다. (1 <= n, m <= 20)
둘째 줄에 n x m개의 위치에 매장된 금의 개수가 공백으로 구분되어 입력된다. (1 <= 각 위치에 매장된 금의 개수 <= 100)


출력
테스트 케이스마다 채굴자가 얻을 수 있는 금의 최대크기를 출력한다. 각 테스트 케이스는 줄바꿈을 이용해 구분한다.


입력 예시
2
3 4
1 3 3 2 2 1 4 1 0 6 4 7
4 4
1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2

출력 예시
19
16
'''

# 접근방법
# 각 열별로 왼쪽 위, 왼쪽, 왼쪽 아래에서부터 얻을 수 있는 금의 최대크기를 저장한다.
# 이후 가장 마지막 열에서 가장 높은 값을 가지고 있는 금광을 출력한다.
import sys
input = sys.stdin.readline
t = int(input()) # 테스트 케이스 입력받기

for _ in range(t):
    n, m = map(int, input().split()) # 금광의 크기 입력받기
    gold_mine = list(map(int, input().split())) # 금광에 대한 정보 입력받기
    d = [0] * (n * m) # 다이나믹 프로그래밍을 위한 d 초기화
    result = 0 # 결과를 담기위한 금광의 크기 초기화

    for i in range(0, n*m, m): 
            d[i] = gold_mine[i] # 금광에서의 첫번째 열에 대한 정보 d에 입력


    for col in range(1, m):
        for i in range(col, n*m, m): 
            # print('탐색중인 광산 :',i)
            if i - (m + 1) >= 0: # 현재 탐색 중인 광산과 바로 왼쪽 위의 광산이 존재할 경우
                d[i] = max(d[i], d[i-(m+1)] + gold_mine[i]) # 둘을 더한 것과 현재 d[i]에 저장되어있는 금의 크기 중 더 큰 것을 저장
                # print('왼쪽 위 :',gold_mine[i-(m+1)], gold_mine[i])
            if i+m-1 <= n*m-1: # 현재 탐색 중인 광산과 바로 왼쪽 아래의 광산이 존재할 경우
                d[i] = max(d[i], d[i+m-1] + gold_mine[i]) # 둘을 더한 것과 현재 d[i]에 저장되어있는 금의 크기 중 더 큰 것을 저장
                # print('왼쪽 아래 :',gold_mine[i+m-1], gold_mine[i])
            
            d[i] = max(d[i], d[i-1] + gold_mine[i]) # 현재 탐색 중인 광산과 바로 왼쪽의 광산에 저장되어있는 금의 크기와 현재 d[i]에 저장되어있는 금의 크기 중 더 큰 것을 저장
            # print('왼쪽 :',gold_mine[i-1], gold_mine[i])
            
            result = max(result, d[i])

    print(result)